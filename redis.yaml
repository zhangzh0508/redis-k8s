---
################
# redis 命名空间
################
apiVersion: v1
kind: Namespace
metadata:
  name: redis
  labels:
    name: redis
---
################
# redis 挂载
################
kind: PersistentVolume
apiVersion: v1
metadata:
  name: data0
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/opt/redis0/data"
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: data1
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/opt/redis1/data"
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: data2
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/opt/redis2/data"
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: data3
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/opt/redis3/data"
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: data4
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/opt/redis4/data"
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: data5
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/opt/redis5/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-redis-0
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  volumeName: data0
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-redis-1
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  volumeName: data1
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-redis-2
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  volumeName: data2
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-redis-3
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  volumeName: data3
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-redis-4
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  volumeName: data4

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-redis-5
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  volumeName: data5
---
################
# redis service
################
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  name: redis
  labels:
    app: redis
spec:
  ports:
  - port: 6379
    name: peer
  - port: 16379
    name: cluster
  # *.redis.default.svc.cluster.local
  clusterIP: None
  selector:
    app: redis
---
###################
# redis ConfigMap
###################
apiVersion: v1
data:
  cluster.conf: |
    port 6379
    appendonly yes
    cluster-enabled yes
    cluster-config-file /var/lib/redis/nodes.conf
    cluster-node-timeout 5000
    dir /var/lib/redis
kind: ConfigMap
metadata:
  name: redis-conf
  labels:
    app: redis
  namespace: redis
---
################
# redis deploy
################
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: redis
spec:
  serviceName: redis
  replicas: 6
  template:
    metadata:
      labels:
        app: redis
        role: node
    spec:
      containers:
        - name: redis
          image: 10.14.125.131:5000/redis-k8s:3.2.6
          imagePullPolicy: Always
          args:
            - "redis-server"
            - "/etc/redis/cluster.conf"
            - "--protected-mode"
            - "no"
          resources:
            requests:
              cpu: "100m"
              memory: "2Gi"
          ports:
            - name: redis
              containerPort: 6379
              protocol: "TCP"
            - name: cluster
              containerPort: 16379
              protocol: "TCP"
          volumeMounts:
            - name: "conf"
              mountPath: "/etc/redis"
            - name: "data"
              mountPath: "/var/lib/redis"
            - name: host-time
              mountPath: /etc/localtime
        - name: "cluster-meet"
          image: 10.14.125.131:5000/redis-k8s:3.2.6
          imagePullPolicy: Always
          command:
          - bash
          - "-c"
          - |
            set -e
            peer-finder -on-start="/usr/local/bin/cluster-meet.sh" -service=redis -ns=redis
            # Don't crash loop
            sleep infinity
      volumes:
        - name: host-time
          hostPath:
            path: /etc/localtime
        - name: "data"
          persistentVolumeClaim:
            claimName: "data"
        - name: "conf"
          configMap:
            name: "redis-conf"
            items:
              - key: "cluster.conf"
                path: "cluster.conf"
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 5Gi
